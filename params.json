{"name":"Porth","body":"# Porth (Plain Old Ruby Template Handler)\r\n\r\n[![Build Status](https://secure.travis-ci.org/tatey/porth.png)](http://travis-ci.org/tatey/porth)\r\n\r\nWrite your views using plain old Ruby. Views are for representation, not defining\r\n`#as_json` in a model. There's no need to learn a DSL for building arrays and hashes.\r\nJust use Ruby. Views are written once and rendered in JSON(P) or XML based on\r\nthe requested format. Porth makes few assumptions and can be configured.\r\n\r\n## Installation\r\n\r\nAdd this to your project's Gemfile and run `$ bundle install`\r\n\r\n``` ruby\r\ngem 'porth'\r\n```\r\n\r\n## Usage\r\n\r\nCreate a controller that responds to JSON, XML or both.\r\n\r\n``` ruby\r\n# app/controllers/transmitters_controller.rb\r\nclass TransmittersController < ApplicationController\r\n  respond_to :json, :xml\r\n  \r\n  def index\r\n    @transmitters = Transmitter.all\r\n    respond_with @transmitters\r\n  end\r\n\r\n  # ...\r\nend\r\n````\r\n\r\nCreate a template with a `.rb` extension. Write plain old Ruby. Objects\r\nmust respond to `#to_json` or `#to_xml`. Arrays and hashes are best.\r\n\r\n``` ruby\r\n# app/views/transmitters/index.rb\r\n@transmitters.map do |t|\r\n  {\r\n    name: t.area_served,\r\n    latitude: t.latitude,\r\n    longitude: t.longitude,\r\n    nearby: t.nearby.size\r\n  }\r\nend\r\n```\r\n\r\nGET /transmitters.json\r\n\r\n``` javascript\r\n[{\"name\":\"Brisbane\",\"latitude\":-27.4661111111111,\"longitude\":152.946388888889,\"nearby\":11}]\r\n```\r\n\r\nGET /transmitters.json?callback=myFunction\r\n\r\n``` javascript\r\nmyFunction([{\"name\":\"Brisbane\",\"latitude\":-27.4661111111111,\"longitude\":152.946388888889,\"nearby\":11}])\r\n```\r\n\r\nGET /transmitters.xml\r\n\r\n``` xml\r\n<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<transmitters type=\"array\">\r\n  <transmitter>\r\n    <name>Brisbane</name>\r\n    <latitude type=\"float\">-27.4661111111111</latitude>\r\n    <longitude type=\"float\">152.946388888889</longitude>\r\n    <nearby type=\"integer\">11</nearby>\r\n  </transmitter>\r\n</transmitters>\r\n```\r\n\r\n`Porth::UnknownFormatError` is raised when the requested format is not supported.\r\n\r\n### JSONP\r\n\r\nPorth calls `#json_callback` to get the function name for JSONP responses. By default\r\nthis method is added to `ActionController::Base` and returns `params[:callback]`. Override\r\n`#json_callback` to get different behaviour.\r\n\r\n``` ruby\r\nclass ApplicationController < ActionController::Base\r\n  # ...\r\n\r\n  protected\r\n  \r\n  def json_callback\r\n    nil # Ignore JSONP requests\r\n  end\r\nend\r\n```\r\n\r\n### XML\r\n\r\nPorth guesses the resource's name from the controller's class. `Foo::BarsController`\r\nbecomes `bars`. Override `#xml_root` to explicitly set the resource name.\r\n\r\n``` ruby\r\nclass TransmittersController < ApplicationController\r\n  # ...\r\n\r\n  protected\r\n  \r\n  def xml_root\r\n    'sites'\r\n  end\r\nend\r\n```\r\n\r\nResource names are pluralized or singularized by introspecting the return type from\r\nthe view. Following convention, collection actions (index) should return \r\nan array of objects and member actions (new, create, edit, update, delete) should \r\nreturn an object. Override `#xml_pluralized_root` to explicitly set the collection \r\nresource name and override `#xml_singularize_root` to explicitly set the member \r\nresource name.\r\n\r\n``` ruby\r\nclass SeaFoodsController < ApplicationController\r\n  # ...\r\n\r\n  protected\r\n  \r\n  def xml_pluralized_root\r\n    'fish'\r\n  end\r\n          \r\n  def xml_singularized_root\r\n    'fish'\r\n  end\r\nend\r\n```\r\n\r\n## Examples\r\n\r\nRemember, anything you can do in Ruby you can do in Porth. Here are a few ideas\r\nfor writing and testing your views.\r\n\r\n### Subset\r\n\r\nConveniently select a subset of attributes.\r\n\r\n``` ruby\r\n# app/views/users/show.rb\r\n@author.attributes.slice 'id', 'first_name', 'last_name', 'email'\r\n```\r\n\r\n### Variable and Condition\r\n\r\nHashes may get dirty if you attempt to build them all in one go. Consider storing\r\nthe hash in a variable and adding to it based on a condition. Like a method you\r\nneed to return the hash on the last line.\r\n\r\n``` ruby\r\n# app/views/users/show.rb\r\nattributes = @author.attributes.slice 'id', 'first_name', 'last_name', 'email'\r\nif current_user.admin?\r\n  attributes['ip_address'] = @author.ip_address\r\n  attributes['likability'] = @author.determine_likability_as_of Time.current\r\nend\r\nattributes\r\n```\r\n\r\n### Functional Test\r\n\r\nUse functional tests to verify the response's body is correct.\r\n\r\n``` ruby\r\n# app/views/posts/show.rb\r\n@author.attributes.slice 'id', 'title', 'body'\r\n```\r\n\r\nJSON maps well to Ruby's hashes. Set the response to JSON, parse the body into \r\na hash and verify the key-value pairs.\r\n\r\n``` ruby\r\n# test/functional/posts_controller_test.rb\r\nrequire 'test_helper'\r\n\r\nclass PostsControllerTest < ActionController::TestCase\r\n  # ...\r\n  \r\n  test \"GET show\" do\r\n    get :show, id: posts(:hello_word).id, format: 'json'\r\n    post = JSON.parse response.body\r\n    assert_equal 123040040, post['id']\r\n    assert_equal 'Hello, World!', post['title']\r\n    assert_equal 'Lorem ipsum dolar sit amet...', post['body']\r\n  end\r\nend\r\n```\r\n\r\n## Compatibility\r\n\r\n* MRI 1.8.7\r\n* MRI 1.9.2+\r\n* JRuby 1.6.4+\r\n\r\n## Dependancies\r\n\r\n* ActionPack 3.0.0+\r\n\r\n## Extensions\r\n\r\n* [porth-plist](https://github.com/soundevolution/porth-plist) - Adds Property list (.plist) support\r\n\r\n## Contributing\r\n\r\n1. Fork\r\n2. Install dependancies by running `$ bundle install`\r\n3. Write tests and code\r\n4. Make sure the tests pass by running `$ bundle exec rake`\r\n5. Push and send a pull request on GitHub\r\n\r\n## Credits\r\n\r\nPorth is the result of numerous discussions at [Everyday Hero](http://www.everydayhero.com.au) \r\naround better API design.\r\n\r\n## Copyright\r\n\r\nCopyright Â© 2011 Tate Johnson. Released under the MIT license. See LICENSE.\r\n","tagline":"Plain Old Ruby Template Handler","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}